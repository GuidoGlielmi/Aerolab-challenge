import Head from 'next/head';
import { useState, useEffect } from 'react';

import styles from '../styles/Home.module.css';
import Button from '../Components/Button';
import Product from '../Components/Product';
import ArrowNext from '../public/assets/icons/arrow-right.svg';
import ArrowPrevious from '../public/assets/icons/arrow-left.svg';

export default function Home({ user, products, setUser }) {
	console.log(products);
	useEffect(() => setUser({ name: user.name, points: user.points }), []);
	const [deviceButtons, setDeviceButtons] = useState(false);
	const [productsArrayIndex, setProductsArrayIndex] = useState(0);

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main className={styles.main}>
				<header className={styles.header}>
					<img src='/assets/header-x1.png' width='100%' alt='header image' className={styles.headerImage} />
					<h1 className={`${styles.headerTitle} bigFont`}>Electronics</h1>
				</header>
				<div className={styles.filter}>
					<div className={styles.filterBox}>
						<span className={`${styles.productsAmount} smallFont`}>{`16 of 32 products`}</span>
						<div className={`${styles.buttons} rowContainer`}>
							<span>Sort by:</span>
							<Button toggleable={true} backgroundColor='#0ad4fa' cursor='pointer'>
								Most Recent
							</Button>
							<Button toggleable={true} backgroundColor='#0ad4fa' cursor='pointer'>
								Lowest price
							</Button>
							<Button toggleable={true} backgroundColor='#0ad4fa' cursor='pointer'>
								Highest price
							</Button>
						</div>
						<div className={`${styles.deviceButtons} columnContainer`}>
							<Button
								onClick={() => setDeviceButtons(!deviceButtons)}
								toggleable={true}
								backgroundColor='#0ad4fa'
								cursor='pointer'
							>
								Sort By
							</Button>
							{deviceButtons ? (
								<>
									<Button toggleable={true} backgroundColor='#0ad4fa' cursor='pointer'>
										Most Recent
									</Button>
									<Button toggleable={true} backgroundColor='#0ad4fa' cursor='pointer'>
										Lowest price
									</Button>
									<Button toggleable={true} backgroundColor='#0ad4fa' cursor='pointer'>
										Highest price
									</Button>
								</>
							) : (
								<></>
							)}
						</div>
					</div>
					<div>
						{productsArrayIndex > 0 ? (
							<ArrowPrevious className={styles.arrow} onClick={() => setProductsArrayIndex(productsArrayIndex + 1)} />
						) : (
							<></>
						)}
						{productsArrayIndex < products.length - 1 ? (
							<ArrowNext className={styles.arrow} onClick={() => setProductsArrayIndex(productsArrayIndex + 1)} />
						) : (
							<></>
						)}
					</div>
				</div>
				<section className={`${styles.section} columnContainer`}>
					<div className={`${styles.products} wrapBox`}>
						{products[productsArrayIndex].map((p, index) => (
							<Product key={index} product={p} availablePoints={user.points} />
						))}
					</div>
					<div className={`${styles.productsAmountFooter} rowContainer smallFont`}>
						<span>16 of 32 products</span>
						<div>
							{productsArrayIndex > 0 ? (
								<ArrowPrevious className={styles.arrow} onClick={() => setProductsArrayIndex(productsArrayIndex + 1)} />
							) : (
								<></>
							)}
							{productsArrayIndex < products.length - 1 ? (
								<ArrowNext className={styles.arrow} onClick={() => setProductsArrayIndex(productsArrayIndex + 1)} />
							) : (
								<></>
							)}
						</div>
					</div>
				</section>
			</main>
			<footer className={styles.footer}>
				<a target='_blank' href='https://github.com/GuidoGlielmi/Aerolab-challenge'>
					Guido Glielmi's GitHub Repository
				</a>
			</footer>
		</div>
	);
} /*'https://coding-challenge-api.aerolab.co/redeem
' */
export async function getStaticProps() {
	try {
		const userRaw = await fetch('https://coding-challenge-api.aerolab.co/user/me', {
			headers: {
				'Content-Type': 'application/json',
				Accept: 'application/json',
				Authorization:
					'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWY2ZDczYWExMzI4NDAwMjFmMDU4ZDIiLCJpYXQiOjE2NDM1NjY5MDZ9.azfKP1anHgSy1fze1GSoxIGINVLf135uatTzeX-jg4Y',
			},
		});
		if (userRaw.status !== 200 && userRaw.status !== 201 && userRaw.status !== 204) {
			const userJson = await userRaw.json();
			throw new Error({ error: userJson.error, status: `${userRaw.status} ${userRaw.statusText}` });
		}
		const userJson = await userRaw.json();
		const productsRaw = await fetch('https://coding-challenge-api.aerolab.co/products', {
			headers: {
				'Content-Type': 'application/json',
				Accept: 'application/json',
				Authorization:
					'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWY2ZDczYWExMzI4NDAwMjFmMDU4ZDIiLCJpYXQiOjE2NDM1NjY5MDZ9.azfKP1anHgSy1fze1GSoxIGINVLf135uatTzeX-jg4Y',
			},
		});
		if (productsRaw.status !== 200 && productsRaw.status !== 201 && productsRaw.status !== 204) {
			const productsJson = await productsRaw.json();
			throw new Error({ error: productsJson.error, status: `${productsRaw.status} ${productsRaw.statusText}` });
		}
		const productsJson = await productsRaw.json();
		const orderedProducts = packer(productsJson, 7);
		return {
			props: {
				user: userJson,
				products: orderedProducts,
			},
		};
	} catch (e) {
		console.log(e);
	}
}

function packer(array, packNumber) {
	const entireArray = [];
	let pack = [];
	for (let index = 0; index < array.length; index++) {
		if (array.length - (index + 1) < array.length % packNumber) {
			pack.push(array[index]);
			if (array.length - index === 1) entireArray.push(pack);
		} else if (index !== 0 && (index + 1) % packNumber === 0) {
			pack.push(array[index]);
			entireArray.push(pack);
			pack = [];
		} else pack.push(array[index]);
	}
	return entireArray;
}
